# Generated by Django on 2025-01-28
from django.db import migrations
from ..views_manager import MaterializedViewsManager


class Migration(migrations.Migration):

    dependencies = [
        ('merankabandi', '0009_add_validation_fields'),
        ('social_protection', '0001_initial'),
        ('individual', '0001_initial'),
        ('location', '0001_initial'),
        ('grievance_social_protection', '0001_initial'),
        ('payroll', '0001_initial'),
    ]

    def create_materialized_views(apps, schema_editor):
        """Create all materialized views and indexes"""
        db_alias = schema_editor.connection.alias
        
        # Skip for non-PostgreSQL databases
        if 'postgresql' not in schema_editor.connection.vendor:
            return
            
        # Execute each statement in its own transaction
        connection = schema_editor.connection
        manager = MaterializedViewsManager()
        
        # Get all view SQL and indexes from the new manager
        all_views = manager.get_all_views()
        all_indexes = manager.get_all_indexes()
        
        # Create views
        for view_name, sql in all_views.items():
            try:
                with connection.cursor() as cursor:
                    cursor.execute(sql)
                    print(f"Created materialized view: {view_name}")
            except Exception as e:
                print(f"Error creating view {view_name}: {e}")
        
        # Create indexes
        for view_name, indexes in all_indexes.items():
            for index_sql in indexes:
                try:
                    with connection.cursor() as cursor:
                        cursor.execute(index_sql)
                except Exception as e:
                    print(f"Error creating index for {view_name}: {e}")
        
        # Create refresh functions
        try:
            with connection.cursor() as cursor:
                refresh_functions = manager.get_refresh_functions()
                cursor.execute(refresh_functions)
                print("Created refresh functions")
        except Exception as e:
            print(f"Error creating refresh functions: {e}")
        
        # Initial refresh of views
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT refresh_dashboard_views(false)")
                print("Performed initial refresh of dashboard views")
        except Exception as e:
            print(f"Error refreshing views: {e}")

    def drop_materialized_views(apps, schema_editor):
        """Drop all materialized views"""
        db_alias = schema_editor.connection.alias
        
        # Skip for non-PostgreSQL databases
        if 'postgresql' not in schema_editor.connection.vendor:
            return
            
        connection = schema_editor.connection
        manager = MaterializedViewsManager()
        
        # Drop views in reverse order
        all_views = manager.get_all_views()
        view_names = list(all_views.keys())
        view_names.reverse()
        
        for view_name in view_names:
            try:
                with connection.cursor() as cursor:
                    cursor.execute(f"DROP MATERIALIZED VIEW IF EXISTS {view_name} CASCADE")
                    print(f"Dropped materialized view: {view_name}")
            except Exception as e:
                print(f"Error dropping view {view_name}: {e}")
        
        # Drop refresh functions
        try:
            with connection.cursor() as cursor:
                cursor.execute("DROP FUNCTION IF EXISTS refresh_dashboard_views CASCADE")
                cursor.execute("DROP FUNCTION IF EXISTS refresh_dashboard_view CASCADE")
                cursor.execute("DROP FUNCTION IF EXISTS get_dashboard_view_stats CASCADE")
                print("Dropped refresh functions")
        except Exception as e:
            print(f"Error dropping functions: {e}")

    operations = [
        migrations.RunPython(
            create_materialized_views,
            reverse_code=drop_materialized_views,
        ),
    ]