"""
Beneficiary Materialized Views
All views related to beneficiaries, households, and demographics
"""

BENEFICIARY_VIEWS = {
    'dashboard_beneficiary_summary': {
        'sql': '''CREATE MATERIALIZED VIEW dashboard_beneficiary_summary AS
SELECT date_trunc('month'::text, gb."DateCreated") AS month, date_trunc('quarter'::text, gb."DateCreated") AS quarter, EXTRACT(year FROM gb."DateCreated") AS year, l3."LocationName" AS province, l2."LocationName" AS commune, l1."LocationName" AS colline, l3."LocationId" AS province_id, l2."LocationId" AS commune_id, l1."LocationId" AS colline_id, CASE WHEN ((l2."LocationName")::text = ANY ((ARRAY['Butezi'::character varying, 'Ruyigi'::character varying, 'Kiremba'::character varying, 'Gasorwe'::character varying, 'Gashoho'::character varying, 'Muyinga'::character varying, 'Cankuzo'::character varying])::text[])) THEN 'HOST'::text ELSE 'REFUGEE'::text END AS community_type, COALESCE((i."Json_ext" ->> 'sexe'::text), 'UNKNOWN'::text) AS gender, CASE WHEN ((i."Json_ext" ->> 'is_twa'::text) = 'true'::text) THEN true ELSE false END AS is_twa, CASE WHEN (i.dob IS NULL) THEN 'UNKNOWN'::text WHEN (date_part('year'::text, age((i.dob)::timestamp with time zone)) < (18)::double precision) THEN 'UNDER_18'::text WHEN ((date_part('year'::text, age((i.dob)::timestamp with time zone)) >= (18)::double precision) AND (date_part('year'::text, age((i.dob)::timestamp with time zone)) <= (35)::double precision)) THEN 'ADULT_18_35'::text WHEN ((date_part('year'::text, age((i.dob)::timestamp with time zone)) >= (36)::double precision) AND (date_part('year'::text, age((i.dob)::timestamp with time zone)) <= (60)::double precision)) THEN 'ADULT_36_60'::text ELSE 'OVER_60'::text END AS age_group, bp.code AS benefit_plan_code, bp.name AS benefit_plan_name, gb.status, gb."isDeleted", count(*) AS beneficiary_count, count( CASE WHEN ((i."Json_ext" ->> 'sexe'::text) = 'M'::text) THEN 1 ELSE NULL::integer END) AS male_count, count( CASE WHEN ((i."Json_ext" ->> 'sexe'::text) = 'F'::text) THEN 1 ELSE NULL::integer END) AS female_count, count( CASE WHEN ((i."Json_ext" ->> 'is_twa'::text) = 'true'::text) THEN 1 ELSE NULL::integer END) AS twa_count, count( CASE WHEN ((gb.status)::text = 'ACTIVE'::text) THEN 1 ELSE NULL::integer END) AS active_count, count( CASE WHEN ((gb.status)::text = 'SUSPENDED'::text) THEN 1 ELSE NULL::integer END) AS suspended_count FROM ((((((social_protection_groupbeneficiary gb JOIN social_protection_benefitplan bp ON ((gb.benefit_plan_id = bp."UUID"))) JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) LEFT JOIN "tblLocations" l1 ON ((i.location_id = l1."LocationId"))) LEFT JOIN "tblLocations" l2 ON ((l1."ParentLocationId" = l2."LocationId"))) LEFT JOIN "tblLocations" l3 ON ((l2."ParentLocationId" = l3."LocationId"))) WHERE (gb."isDeleted" = false) GROUP BY (date_trunc('month'::text, gb."DateCreated")), (date_trunc('quarter'::text, gb."DateCreated")), (EXTRACT(year FROM gb."DateCreated")), l3."LocationName", l2."LocationName", l1."LocationName", l3."LocationId", l2."LocationId", l1."LocationId", CASE WHEN ((l2."LocationName")::text = ANY ((ARRAY['Butezi'::character varying, 'Ruyigi'::character varying, 'Kiremba'::character varying, 'Gasorwe'::character varying, 'Gashoho'::character varying, 'Muyinga'::character varying, 'Cankuzo'::character varying])::text[])) THEN 'HOST'::text ELSE 'REFUGEE'::text END, COALESCE((i."Json_ext" ->> 'sexe'::text), 'UNKNOWN'::text), CASE WHEN ((i."Json_ext" ->> 'is_twa'::text) = 'true'::text) THEN true ELSE false END, CASE WHEN (i.dob IS NULL) THEN 'UNKNOWN'::text WHEN (date_part('year'::text, age((i.dob)::timestamp with time zone)) < (18)::double precision) THEN 'UNDER_18'::text WHEN ((date_part('year'::text, age((i.dob)::timestamp with time zone)) >= (18)::double precision) AND (date_part('year'::text, age((i.dob)::timestamp with time zone)) <= (35)::double precision)) THEN 'ADULT_18_35'::text WHEN ((date_part('year'::text, age((i.dob)::timestamp with time zone)) >= (36)::double precision) AND (date_part('year'::text, age((i.dob)::timestamp with time zone)) <= (60)::double precision)) THEN 'ADULT_36_60'::text ELSE 'OVER_60'::text END, bp.code, bp.name, gb.status, gb."isDeleted"''',
        'indexes': [
            """CREATE INDEX idx_dashboard_beneficiary_summary_commune ON dashboard_beneficiary_summary USING btree (commune_id);""",
            """CREATE INDEX idx_dashboard_beneficiary_summary_location ON dashboard_beneficiary_summary USING btree (colline_id);""",
            """CREATE INDEX idx_dashboard_beneficiary_summary_province ON dashboard_beneficiary_summary USING btree (province_id);""",
        ]
    },
    'dashboard_beneficiary_summary_enhanced': {
        'sql': '''CREATE MATERIALIZED VIEW dashboard_beneficiary_summary_enhanced AS
SELECT date_trunc('month'::text, gb."DateCreated") AS month, date_trunc('quarter'::text, gb."DateCreated") AS quarter, EXTRACT(year FROM gb."DateCreated") AS year, l3."LocationName" AS province, l2."LocationName" AS commune, l1."LocationName" AS colline, l3."LocationId" AS province_id, l2."LocationId" AS commune_id, l1."LocationId" AS colline_id, CASE WHEN ((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) THEN 'REFUGEE'::text WHEN ((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) THEN 'RETURNEE'::text WHEN ((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text) THEN 'DISPLACED'::text ELSE 'HOST'::text END AS community_type, COALESCE((i."Json_ext" ->> 'sexe'::text), 'UNKNOWN'::text) AS gender, CASE WHEN ((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) THEN true ELSE false END AS is_twa, CASE WHEN ((i."Json_ext" ->> 'handicap'::text) = 'OUI'::text) THEN true WHEN ((i."Json_ext" ->> 'handicap'::text) = 'NON'::text) THEN false ELSE NULL::boolean END AS has_disability, COALESCE((i."Json_ext" ->> 'type_handicap'::text), ''::text) AS disability_type, CASE WHEN ((i."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text) THEN true WHEN ((i."Json_ext" ->> 'maladie_chro'::text) = 'NON'::text) THEN false ELSE NULL::boolean END AS has_chronic_illness, COALESCE((i."Json_ext" ->> 'maladie_chro_type'::text), ''::text) AS chronic_illness_type, CASE WHEN (i.dob IS NULL) THEN 'UNKNOWN'::text WHEN (date_part('year'::text, age((i.dob)::timestamp with time zone)) < (18)::double precision) THEN 'UNDER_18'::text WHEN ((date_part('year'::text, age((i.dob)::timestamp with time zone)) >= (18)::double precision) AND (date_part('year'::text, age((i.dob)::timestamp with time zone)) <= (35)::double precision)) THEN 'ADULT_18_35'::text WHEN ((date_part('year'::text, age((i.dob)::timestamp with time zone)) >= (36)::double precision) AND (date_part('year'::text, age((i.dob)::timestamp with time zone)) <= (60)::double precision)) THEN 'ADULT_36_60'::text ELSE 'OVER_60'::text END AS age_group, bp.code AS benefit_plan_code, bp.name AS benefit_plan_name, CASE WHEN ((bp.code)::text ~~ 'TMR%'::text) THEN 'REFUGEE_TRANSFER'::text WHEN ((bp.code)::text ~~ 'TMO%'::text) THEN 'ORDINARY_TRANSFER'::text WHEN ((bp.code)::text ~~ 'TMU-C%'::text) THEN 'CLIMATE_EMERGENCY'::text WHEN ((bp.code)::text ~~ 'TMU-CERC%'::text) THEN 'CERC_EMERGENCY'::text ELSE 'OTHER'::text END AS benefit_category, gb.status, gb."isDeleted", count(*) AS beneficiary_count, count( CASE WHEN ((i."Json_ext" ->> 'sexe'::text) = 'M'::text) THEN 1 ELSE NULL::integer END) AS male_count, count( CASE WHEN ((i."Json_ext" ->> 'sexe'::text) = 'F'::text) THEN 1 ELSE NULL::integer END) AS female_count, count( CASE WHEN ((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) THEN 1 ELSE NULL::integer END) AS twa_count, count( CASE WHEN ((i."Json_ext" ->> 'handicap'::text) = 'OUI'::text) THEN 1 ELSE NULL::integer END) AS disabled_count, count( CASE WHEN ((i."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text) THEN 1 ELSE NULL::integer END) AS chronic_illness_count, count( CASE WHEN ((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) THEN 1 ELSE NULL::integer END) AS refugee_count, count( CASE WHEN ((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) THEN 1 ELSE NULL::integer END) AS returnee_count, count( CASE WHEN ((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text) THEN 1 ELSE NULL::integer END) AS displaced_count, count( CASE WHEN (((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) OR ((i."Json_ext" ->> 'handicap'::text) = 'OUI'::text) OR ((i."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text) OR ((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) OR ((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) OR ((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text)) THEN 1 ELSE NULL::integer END) AS vulnerable_count, count( CASE WHEN ((gb.status)::text = 'ACTIVE'::text) THEN 1 ELSE NULL::integer END) AS active_count, count( CASE WHEN ((gb.status)::text = 'SUSPENDED'::text) THEN 1 ELSE NULL::integer END) AS suspended_count FROM (((((((social_protection_groupbeneficiary gb JOIN social_protection_benefitplan bp ON ((gb.benefit_plan_id = bp."UUID"))) JOIN individual_group g ON ((gb.group_id = g."UUID"))) JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) LEFT JOIN "tblLocations" l1 ON ((i.location_id = l1."LocationId"))) LEFT JOIN "tblLocations" l2 ON ((l1."ParentLocationId" = l2."LocationId"))) LEFT JOIN "tblLocations" l3 ON ((l2."ParentLocationId" = l3."LocationId"))) WHERE (gb."isDeleted" = false) GROUP BY (date_trunc('month'::text, gb."DateCreated")), (date_trunc('quarter'::text, gb."DateCreated")), (EXTRACT(year FROM gb."DateCreated")), l3."LocationName", l2."LocationName", l1."LocationName", l3."LocationId", l2."LocationId", l1."LocationId", CASE WHEN ((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) THEN 'REFUGEE'::text WHEN ((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) THEN 'RETURNEE'::text WHEN ((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text) THEN 'DISPLACED'::text ELSE 'HOST'::text END, COALESCE((i."Json_ext" ->> 'sexe'::text), 'UNKNOWN'::text), CASE WHEN ((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) THEN true ELSE false END, CASE WHEN ((i."Json_ext" ->> 'handicap'::text) = 'OUI'::text) THEN true WHEN ((i."Json_ext" ->> 'handicap'::text) = 'NON'::text) THEN false ELSE NULL::boolean END, COALESCE((i."Json_ext" ->> 'type_handicap'::text), ''::text), CASE WHEN ((i."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text) THEN true WHEN ((i."Json_ext" ->> 'maladie_chro'::text) = 'NON'::text) THEN false ELSE NULL::boolean END, COALESCE((i."Json_ext" ->> 'maladie_chro_type'::text), ''::text), CASE WHEN (i.dob IS NULL) THEN 'UNKNOWN'::text WHEN (date_part('year'::text, age((i.dob)::timestamp with time zone)) < (18)::double precision) THEN 'UNDER_18'::text WHEN ((date_part('year'::text, age((i.dob)::timestamp with time zone)) >= (18)::double precision) AND (date_part('year'::text, age((i.dob)::timestamp with time zone)) <= (35)::double precision)) THEN 'ADULT_18_35'::text WHEN ((date_part('year'::text, age((i.dob)::timestamp with time zone)) >= (36)::double precision) AND (date_part('year'::text, age((i.dob)::timestamp with time zone)) <= (60)::double precision)) THEN 'ADULT_36_60'::text ELSE 'OVER_60'::text END, bp.code, bp.name, CASE WHEN ((bp.code)::text ~~ 'TMR%'::text) THEN 'REFUGEE_TRANSFER'::text WHEN ((bp.code)::text ~~ 'TMO%'::text) THEN 'ORDINARY_TRANSFER'::text WHEN ((bp.code)::text ~~ 'TMU-C%'::text) THEN 'CLIMATE_EMERGENCY'::text WHEN ((bp.code)::text ~~ 'TMU-CERC%'::text) THEN 'CERC_EMERGENCY'::text ELSE 'OTHER'::text END, gb.status, gb."isDeleted"''',
        'indexes': [
        ]
    },
    'dashboard_individual_summary': {
        'sql': '''CREATE MATERIALIZED VIEW dashboard_individual_summary AS
SELECT CURRENT_DATE AS report_date, date_trunc('month'::text, (CURRENT_DATE)::timestamp with time zone) AS month, date_trunc('quarter'::text, (CURRENT_DATE)::timestamp with time zone) AS quarter, EXTRACT(year FROM CURRENT_DATE) AS year, 'INDIVIDUAL_SUMMARY'::text AS summary_type, count(*) AS total_individuals, count( CASE WHEN ((individual_individual."Json_ext" ->> 'sexe'::text) = 'M'::text) THEN 1 ELSE NULL::integer END) AS total_male, count( CASE WHEN ((individual_individual."Json_ext" ->> 'sexe'::text) = 'F'::text) THEN 1 ELSE NULL::integer END) AS total_female, count( CASE WHEN ((individual_individual."Json_ext" ->> 'is_twa'::text) = 'true'::text) THEN 1 ELSE NULL::integer END) AS total_twa, CASE WHEN (count(*) > 0) THEN (((count( CASE WHEN ((individual_individual."Json_ext" ->> 'sexe'::text) = 'M'::text) THEN 1 ELSE NULL::integer END))::numeric / (count(*))::numeric) * (100)::numeric) ELSE (0)::numeric END AS male_percentage, CASE WHEN (count(*) > 0) THEN (((count( CASE WHEN ((individual_individual."Json_ext" ->> 'sexe'::text) = 'F'::text) THEN 1 ELSE NULL::integer END))::numeric / (count(*))::numeric) * (100)::numeric) ELSE (0)::numeric END AS female_percentage, CASE WHEN (count(*) > 0) THEN (((count( CASE WHEN ((individual_individual."Json_ext" ->> 'is_twa'::text) = 'true'::text) THEN 1 ELSE NULL::integer END))::numeric / (count(*))::numeric) * (100)::numeric) ELSE (0)::numeric END AS twa_percentage, ( SELECT count(*) AS count FROM individual_group WHERE (individual_group."isDeleted" = false)) AS total_households, ( SELECT count(*) AS count FROM social_protection_groupbeneficiary WHERE (social_protection_groupbeneficiary."isDeleted" = false)) AS total_beneficiaries FROM individual_individual WHERE (individual_individual."isDeleted" = false) GROUP BY CURRENT_DATE, (date_trunc('month'::text, (CURRENT_DATE)::timestamp with time zone)), (date_trunc('quarter'::text, (CURRENT_DATE)::timestamp with time zone)), (EXTRACT(year FROM CURRENT_DATE)), 'INDIVIDUAL_SUMMARY'::text''',
        'indexes': [
            """CREATE INDEX idx_individual_summary_month ON dashboard_individual_summary USING btree (month);""",
        ]
    },
    'dashboard_master_summary': {
        'sql': '''CREATE MATERIALIZED VIEW dashboard_master_summary AS
SELECT CURRENT_DATE AS report_date, date_trunc('month'::text, (CURRENT_DATE)::timestamp with time zone) AS month, date_trunc('quarter'::text, (CURRENT_DATE)::timestamp with time zone) AS quarter, EXTRACT(year FROM CURRENT_DATE) AS year, 'SUMMARY'::text AS summary_type, ( SELECT count(*) AS count FROM social_protection_groupbeneficiary WHERE (social_protection_groupbeneficiary."isDeleted" = false)) AS total_beneficiaries, ( SELECT count(*) AS count FROM social_protection_groupbeneficiary WHERE (social_protection_groupbeneficiary."isDeleted" = false)) AS active_beneficiaries, ( SELECT count(*) AS count FROM payroll_payroll WHERE (payroll_payroll."isDeleted" = false)) AS total_transfers, ( SELECT COALESCE(sum((payroll_benefitconsumption."Amount")::numeric), (0)::numeric) AS "coalesce" FROM payroll_benefitconsumption WHERE (payroll_benefitconsumption."isDeleted" = false)) AS total_amount_paid, ( SELECT count(*) AS count FROM individual_group WHERE (individual_group."isDeleted" = false)) AS total_households, ( SELECT count(*) AS count FROM individual_individual WHERE (individual_individual."isDeleted" = false)) AS total_individuals, ( SELECT count( CASE WHEN ((individual_individual."Json_ext" ->> 'sexe'::text) = 'M'::text) THEN 1 ELSE NULL::integer END) AS count FROM individual_individual WHERE (individual_individual."isDeleted" = false)) AS total_male, ( SELECT count( CASE WHEN ((individual_individual."Json_ext" ->> 'sexe'::text) = 'F'::text) THEN 1 ELSE NULL::integer END) AS count FROM individual_individual WHERE (individual_individual."isDeleted" = false)) AS total_female, ( SELECT count( CASE WHEN ((individual_individual."Json_ext" ->> 'is_twa'::text) = 'true'::text) THEN 1 ELSE NULL::integer END) AS count FROM individual_individual WHERE (individual_individual."isDeleted" = false)) AS total_twa, ( SELECT count(*) AS count FROM grievance_social_protection_ticket WHERE (grievance_social_protection_ticket."isDeleted" = false)) AS total_grievances, ( SELECT count(*) AS count FROM grievance_social_protection_ticket WHERE ((grievance_social_protection_ticket."isDeleted" = false) AND ((grievance_social_protection_ticket.status)::text = 'RESOLVED'::text))) AS resolved_grievances, ( SELECT count(DISTINCT l3."LocationId") AS count FROM ((((((social_protection_groupbeneficiary gb JOIN individual_group ig ON ((gb.group_id = ig."UUID"))) JOIN individual_groupindividual gi ON ((gi.group_id = ig."UUID"))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) JOIN "tblLocations" l1 ON ((i.location_id = l1."LocationId"))) JOIN "tblLocations" l2 ON ((l1."ParentLocationId" = l2."LocationId"))) JOIN "tblLocations" l3 ON ((l2."ParentLocationId" = l3."LocationId"))) WHERE ((gb."isDeleted" = false) AND ((l3."LocationType")::text = 'D'::text))) AS active_provinces, ( SELECT count(*) AS count FROM merankabandi_indicatorachievement) AS total_achievements GROUP BY CURRENT_DATE, (date_trunc('month'::text, (CURRENT_DATE)::timestamp with time zone)), (date_trunc('quarter'::text, (CURRENT_DATE)::timestamp with time zone)), (EXTRACT(year FROM CURRENT_DATE)), 'SUMMARY'::text''',
        'indexes': [
            """CREATE INDEX idx_master_summary_month ON dashboard_master_summary USING btree (month);""",
        ]
    },
    'dashboard_master_summary_enhanced': {
        'sql': '''CREATE MATERIALIZED VIEW dashboard_master_summary_enhanced AS
SELECT 'MASTER_SUMMARY'::text AS summary_type, ( SELECT count(*) AS count FROM social_protection_groupbeneficiary WHERE ((social_protection_groupbeneficiary."isDeleted" = false) AND ((social_protection_groupbeneficiary.status)::text = 'ACTIVE'::text))) AS total_beneficiaries, ( SELECT count(DISTINCT social_protection_groupbeneficiary.group_id) AS count FROM social_protection_groupbeneficiary WHERE ((social_protection_groupbeneficiary."isDeleted" = false) AND ((social_protection_groupbeneficiary.status)::text = 'ACTIVE'::text))) AS total_households, ( SELECT count(*) AS count FROM ((social_protection_groupbeneficiary gb JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND ((i."Json_ext" ->> 'sexe'::text) = 'M'::text))) AS total_male, ( SELECT count(*) AS count FROM ((social_protection_groupbeneficiary gb JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND ((i."Json_ext" ->> 'sexe'::text) = 'F'::text))) AS total_female, ( SELECT count(DISTINCT i."UUID") AS count FROM (((social_protection_groupbeneficiary gb JOIN individual_group g ON ((gb.group_id = g."UUID"))) JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND ((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text))) AS total_twa, ( SELECT count(DISTINCT i."UUID") AS count FROM ((social_protection_groupbeneficiary gb JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND ((i."Json_ext" ->> 'handicap'::text) = 'OUI'::text))) AS total_disabled, ( SELECT count(DISTINCT i."UUID") AS count FROM ((social_protection_groupbeneficiary gb JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND ((i."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text))) AS total_chronic_illness, ( SELECT count(DISTINCT i."UUID") AS count FROM (((social_protection_groupbeneficiary gb JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) JOIN individual_group g ON ((gi.group_id = g."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND ((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text))) AS total_refugees, ( SELECT count(DISTINCT i."UUID") AS count FROM (((social_protection_groupbeneficiary gb JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) JOIN individual_group g ON ((gi.group_id = g."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND ((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text))) AS total_returnees, ( SELECT count(DISTINCT i."UUID") AS count FROM (((social_protection_groupbeneficiary gb JOIN individual_groupindividual gi ON ((gi.group_id = gb.group_id))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) JOIN individual_group g ON ((gi.group_id = g."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND ((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text))) AS total_displaced, ( SELECT count(DISTINCT g."UUID") AS count FROM (social_protection_groupbeneficiary gb JOIN individual_group g ON ((gb.group_id = g."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND ((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text))) AS twa_households, ( SELECT count(DISTINCT g."UUID") AS count FROM (social_protection_groupbeneficiary gb JOIN individual_group g ON ((gb.group_id = g."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND (EXISTS ( SELECT 1 FROM (individual_groupindividual gi2 JOIN individual_individual i2 ON ((gi2.individual_id = i2."UUID"))) WHERE ((gi2.group_id = g."UUID") AND ((i2."Json_ext" ->> 'handicap'::text) = 'OUI'::text)))))) AS disabled_households, ( SELECT count(DISTINCT g."UUID") AS count FROM (social_protection_groupbeneficiary gb JOIN individual_group g ON ((gb.group_id = g."UUID"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text) AND (EXISTS ( SELECT 1 FROM (individual_groupindividual gi2 JOIN individual_individual i2 ON ((gi2.individual_id = i2."UUID"))) WHERE ((gi2.group_id = g."UUID") AND ((i2."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text)))))) AS chronic_illness_households, (( SELECT sum(merankabandi_sensitizationtraining.twa_participants) AS sum FROM merankabandi_sensitizationtraining) + ( SELECT sum(merankabandi_behaviorchangepromotion.twa_participants) AS sum FROM merankabandi_behaviorchangepromotion)) AS total_twa_activity_participants, CURRENT_TIMESTAMP AS last_updated''',
        'indexes': [
        ]
    },
    'dashboard_vulnerable_groups': {
        'sql': '''CREATE MATERIALIZED VIEW dashboard_vulnerable_groups AS
SELECT l3."LocationName" AS province, l3."LocationId" AS province_id, (g."Json_ext" ->> 'type_menage'::text) AS household_type, bp.code AS benefit_plan_code, bp.name AS benefit_plan_name, count(DISTINCT g."UUID") AS total_households, count(DISTINCT i."UUID") AS total_members, count(DISTINCT CASE WHEN ((gi.recipient_type)::text = 'PRIMARY'::text) THEN i."UUID" ELSE NULL::uuid END) AS total_beneficiaries, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) THEN g."UUID" ELSE NULL::uuid END) AS twa_households, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS twa_members, count(DISTINCT CASE WHEN (((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS twa_beneficiaries, count(DISTINCT CASE WHEN (EXISTS ( SELECT 1 FROM (individual_groupindividual gi2 JOIN individual_individual i2 ON ((gi2.individual_id = i2."UUID"))) WHERE ((gi2.group_id = g."UUID") AND ((i2."Json_ext" ->> 'handicap'::text) = 'OUI'::text)))) THEN g."UUID" ELSE NULL::uuid END) AS disabled_households, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'handicap'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS disabled_members, count(DISTINCT CASE WHEN (((i."Json_ext" ->> 'handicap'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS disabled_beneficiaries, count(DISTINCT CASE WHEN (EXISTS ( SELECT 1 FROM (individual_groupindividual gi2 JOIN individual_individual i2 ON ((gi2.individual_id = i2."UUID"))) WHERE ((gi2.group_id = g."UUID") AND ((i2."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text)))) THEN g."UUID" ELSE NULL::uuid END) AS chronic_illness_households, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS chronic_illness_members, count(DISTINCT CASE WHEN (((i."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS chronic_illness_beneficiaries, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) THEN g."UUID" ELSE NULL::uuid END) AS refugee_households, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS refugee_members, count(DISTINCT CASE WHEN (((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS refugee_beneficiaries, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) THEN g."UUID" ELSE NULL::uuid END) AS returnee_households, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS returnee_members, count(DISTINCT CASE WHEN (((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS returnee_beneficiaries, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text) THEN g."UUID" ELSE NULL::uuid END) AS displaced_households, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS displaced_members, count(DISTINCT CASE WHEN (((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS displaced_beneficiaries, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'type_handicap'::text) ~~ '%physique%'::text) THEN i."UUID" ELSE NULL::uuid END) AS physical_disability_count, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'type_handicap'::text) ~~ '%mental%'::text) THEN i."UUID" ELSE NULL::uuid END) AS mental_disability_count, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'type_handicap'::text) ~~ '%visuel%'::text) THEN i."UUID" ELSE NULL::uuid END) AS visual_disability_count, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'type_handicap'::text) ~~ '%auditif%'::text) THEN i."UUID" ELSE NULL::uuid END) AS hearing_disability_count, CURRENT_DATE AS report_date FROM (((((((social_protection_groupbeneficiary gb JOIN social_protection_benefitplan bp ON ((gb.benefit_plan_id = bp."UUID"))) JOIN individual_group g ON ((gb.group_id = g."UUID"))) JOIN individual_groupindividual gi ON ((gi.group_id = g."UUID"))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) LEFT JOIN "tblLocations" l1 ON ((g.location_id = l1."LocationId"))) LEFT JOIN "tblLocations" l2 ON ((l1."ParentLocationId" = l2."LocationId"))) LEFT JOIN "tblLocations" l3 ON ((l2."ParentLocationId" = l3."LocationId"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text)) GROUP BY l3."LocationName", l3."LocationId", (g."Json_ext" ->> 'type_menage'::text), bp.code, bp.name, CURRENT_DATE''',
        'indexes': [
            """CREATE INDEX idx_dashboard_vulnerable_groups_province ON dashboard_vulnerable_groups USING btree (province_id);""",
        ]
    },
    'dashboard_vulnerable_groups_summary': {
        'sql': '''CREATE MATERIALIZED VIEW dashboard_vulnerable_groups_summary AS
SELECT l3."LocationName" AS province, l3."LocationId" AS province_id, (g."Json_ext" ->> 'type_menage'::text) AS household_type, bp.code AS benefit_plan_code, bp.name AS benefit_plan_name, count(DISTINCT g."UUID") AS total_households, count(DISTINCT i."UUID") AS total_members, count(DISTINCT CASE WHEN ((gi.recipient_type)::text = 'PRIMARY'::text) THEN i."UUID" ELSE NULL::uuid END) AS total_beneficiaries, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) THEN g."UUID" ELSE NULL::uuid END) AS twa_households, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS twa_members, count(DISTINCT CASE WHEN (((g."Json_ext" ->> 'menage_mutwa'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS twa_beneficiaries, count(DISTINCT CASE WHEN (EXISTS ( SELECT 1 FROM (individual_groupindividual gi2 JOIN individual_individual i2 ON ((gi2.individual_id = i2."UUID"))) WHERE ((gi2.group_id = g."UUID") AND ((i2."Json_ext" ->> 'handicap'::text) = 'OUI'::text)))) THEN g."UUID" ELSE NULL::uuid END) AS disabled_households, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'handicap'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS disabled_members, count(DISTINCT CASE WHEN (((i."Json_ext" ->> 'handicap'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS disabled_beneficiaries, count(DISTINCT CASE WHEN (EXISTS ( SELECT 1 FROM (individual_groupindividual gi2 JOIN individual_individual i2 ON ((gi2.individual_id = i2."UUID"))) WHERE ((gi2.group_id = g."UUID") AND ((i2."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text)))) THEN g."UUID" ELSE NULL::uuid END) AS chronic_illness_households, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS chronic_illness_members, count(DISTINCT CASE WHEN (((i."Json_ext" ->> 'maladie_chro'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS chronic_illness_beneficiaries, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) THEN g."UUID" ELSE NULL::uuid END) AS refugee_households, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS refugee_members, count(DISTINCT CASE WHEN (((g."Json_ext" ->> 'menage_refugie'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS refugee_beneficiaries, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) THEN g."UUID" ELSE NULL::uuid END) AS returnee_households, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS returnee_members, count(DISTINCT CASE WHEN (((g."Json_ext" ->> 'menage_rapatrie'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS returnee_beneficiaries, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text) THEN g."UUID" ELSE NULL::uuid END) AS displaced_households, count(DISTINCT CASE WHEN ((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text) THEN i."UUID" ELSE NULL::uuid END) AS displaced_members, count(DISTINCT CASE WHEN (((g."Json_ext" ->> 'menage_deplace'::text) = 'OUI'::text) AND ((gi.recipient_type)::text = 'PRIMARY'::text)) THEN i."UUID" ELSE NULL::uuid END) AS displaced_beneficiaries, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'type_handicap'::text) ~~ '%physique%'::text) THEN i."UUID" ELSE NULL::uuid END) AS physical_disability_count, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'type_handicap'::text) ~~ '%mental%'::text) THEN i."UUID" ELSE NULL::uuid END) AS mental_disability_count, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'type_handicap'::text) ~~ '%visuel%'::text) THEN i."UUID" ELSE NULL::uuid END) AS visual_disability_count, count(DISTINCT CASE WHEN ((i."Json_ext" ->> 'type_handicap'::text) ~~ '%auditif%'::text) THEN i."UUID" ELSE NULL::uuid END) AS hearing_disability_count, CURRENT_DATE AS report_date FROM (((((((social_protection_groupbeneficiary gb JOIN social_protection_benefitplan bp ON ((gb.benefit_plan_id = bp."UUID"))) JOIN individual_group g ON ((gb.group_id = g."UUID"))) JOIN individual_groupindividual gi ON ((gi.group_id = g."UUID"))) JOIN individual_individual i ON ((gi.individual_id = i."UUID"))) LEFT JOIN "tblLocations" l1 ON ((g.location_id = l1."LocationId"))) LEFT JOIN "tblLocations" l2 ON ((l1."ParentLocationId" = l2."LocationId"))) LEFT JOIN "tblLocations" l3 ON ((l2."ParentLocationId" = l3."LocationId"))) WHERE ((gb."isDeleted" = false) AND ((gb.status)::text = 'ACTIVE'::text)) GROUP BY l3."LocationName", l3."LocationId", (g."Json_ext" ->> 'type_menage'::text), bp.code, bp.name, CURRENT_DATE''',
        'indexes': [
        ]
    },
}
